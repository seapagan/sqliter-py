{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"SQLiter","text":"<p>SQLiter is a lightweight Object-Relational Mapping (ORM) library for SQLite databases in Python. It provides a simplified interface for interacting with SQLite databases using Pydantic models. The only external run-time dependency is Pydantic itself.</p> <p>It does not aim to be a full-fledged ORM like SQLAlchemy, but rather a simple and easy-to-use library for basic database operations, especially for small projects. It is NOT asynchronous and does not support complex queries (at this time).</p> <p>The ideal use case is more for Python CLI tools that need to store data in a database-like format without needing to learn SQL or use a full ORM.</p> <p>Caution</p> <p>This project is still in the early stages of development and is lacking some planned functionality. Please use with caution.</p> <p>Also, structures like <code>list</code>, <code>dict</code>, <code>set</code> etc are not supported at this time as field types, since SQLite does not have a native column type for these. I will look at implementing these in the future, probably by serializing them to JSON or pickling them and storing in a text field. For now, you can actually do this manually when creating your Model (use <code>TEXT</code> or <code>BLOB</code> fields), then serialize before saving after and retrieving data.</p> <p>See the TODO for planned features and improvements.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Table creation based on Pydantic models</li> <li>CRUD operations (Create, Read, Update, Delete)</li> <li>Basic query building with filtering, ordering, and pagination</li> <li>Transaction support</li> <li>Custom exceptions for better error handling</li> <li>Full type hinting and type checking</li> <li>No external dependencies other than Pydantic</li> <li>Full test coverage</li> </ul>"},{"location":"changelog/","title":"Changelog","text":"<p>This is an auto-generated log of all the changes that have been made to the project since the first release, with the latest changes at the top.</p> <p>This project adheres to Semantic Versioning.</p>"},{"location":"changelog/#unreleased","title":"Unreleased","text":"<p>Documentation</p> <ul> <li>Add a documentation website and trim down the README (#25) by seapagan</li> </ul> <p><code>Full Changelog</code> | <code>Diff</code> | <code>Patch</code></p>"},{"location":"changelog/#030-september-23-2024","title":"0.3.0 (September 23, 2024)","text":"<p>Breaking Changes</p> <ul> <li>Rename 'create_id' to 'create_pk' (#23) by seapagan</li> </ul> <p>New Features</p> <ul> <li>Deprecate 'direction=' for 'reverse=' in <code>order()</code> method. (#24) by seapagan</li> <li>Add improved table name generation (#21) by seapagan</li> <li>Implement an in-memory database option (#15) by seapagan</li> <li>Allow selecting a subset of the database fields instead of all them (#12) by seapagan</li> <li>Improve dev tooling and contributor documentation (#11) by seapagan</li> </ul> <p>Dependency Updates</p> <ul> <li>Update dependency ruff to v0.6.7 (#19) by renovate[bot]</li> <li>Update dependency pydantic to v2.9.2 (#18) by renovate[bot]</li> <li>Update dependency idna to v3.10 (#17) by renovate[bot]</li> <li>Update dependency zipp to v3.20.2 (#16) by renovate[bot]</li> <li>Update astral-sh/setup-uv action to v3 (#10) by renovate[bot]</li> </ul> <p><code>Full Changelog</code> | <code>Diff</code> | <code>Patch</code></p>"},{"location":"changelog/#020-september-14-2024","title":"0.2.0 (September 14, 2024)","text":"<p>New Features</p> <ul> <li>Default to auto_create=True, and add 'commit()' &amp; 'close()' methods (#9) by seapagan</li> <li>Add more advanced filtering options (#7) by seapagan</li> </ul> <p>Bug Fixes</p> <ul> <li>Ensure context manager commits on exit (#8) by seapagan</li> </ul> <p><code>Full Changelog</code> | <code>Diff</code> | <code>Patch</code></p>"},{"location":"changelog/#011-september-12-2024","title":"0.1.1 (September 12, 2024)","text":"<p>Just a documentation fix - README was old version</p> <p><code>Full Changelog</code> | <code>Diff</code> | <code>Patch</code></p>"},{"location":"changelog/#010-september-12-2024","title":"0.1.0 (September 12, 2024)","text":"<p>New Features</p> <ul> <li>Remove transaction exception (TransactionError) (#4) by seapagan</li> <li>Improve error handling across the library (#3) by seapagan</li> <li>Add 'limit', 'offset' and 'order' methods (#2) by seapagan</li> </ul> <p>Testing</p> <ul> <li>Add a full test suite to the existing code. (#1) by seapagan</li> </ul> <p>Dependency Updates</p> <ul> <li>Configure Renovate (#5) by renovate[bot]</li> </ul> <p>This changelog was generated using github-changelog-md by Seapagan</p>"},{"location":"contributing/","title":"Contributing to SQLiter","text":"<p>Thank you for your interest in contributing to SQLiter! We welcome all contributions, big or small.</p> <p>If you are not sure where to start, please take a look at the open issues. If you have an idea for a new feature or would like to report a bug, please open a new issue.</p> <p>We also welcome contributions to the documentation. If you find any errors or would like to suggest improvements, please open a new issue or submit a pull</p>"},{"location":"contributing/#prerequisites","title":"Prerequisites","text":"<ul> <li>This project requires Python 3.9 or higher.</li> </ul> <ul> <li>We use uv to manage our dependencies. You should have this installed as well. You can install <code>uv</code> by following the instructions on their website.</li> </ul> <p><code>uv</code> can be used to actually install Python, even if you do not have it installed locally (either by system, pyenv or similar).</p> <p>For example, to install Python 3.12 using <code>uv</code>, you can run the following command:</p> <pre><code>uv python install 3.12\n</code></pre> <p>If you already have a Python version installed, uv will use this.</p>"},{"location":"contributing/#getting-started","title":"Getting Started","text":"<p>Before you start contributing, please make sure you have read and understood our Code of Conduct and License.</p> <p>To get started, follow these steps:</p> <ol> <li>Fork the repository and clone it to your local machine.</li> <li>Install the required dependencies (see next section).</li> <li>Create a new branch for your changes: <code>git checkout -b my-new-feature</code>.</li> <li>Make your changes and commit them: <code>git commit -am 'Add some feature'</code>.</li> <li>Push your changes to your fork: <code>git push origin my-new-feature</code>.</li> <li>Create a new pull request.</li> </ol>"},{"location":"contributing/#install-dependencies","title":"Install Dependencies","text":"<p>Run the following command to create a local virtualenv and install the required dependencies. We need the optional extras installed so the tests pass:</p> <pre><code>uv sync --all-extras\n</code></pre> <p>The <code>.venv</code> folder is already in the <code>.gitignore</code> file so will not be committed to the repository. This is where the virtual environment will be created.</p> <p>You then need to activate the virtual environment:</p> <pre><code>source .venv/bin/activate\n</code></pre> <p>From here you can start working on the project. If you are using an IDE such as VSCode or PyCharm, you can set their Python interpreter setting to use the virtual environment that has just been created.</p>"},{"location":"contributing/#install-git-pre-commit-hooks","title":"Install Git Pre-Commit hooks","text":"<p>Please do this if you are intending to submit a PR. It will check commits locally before they are pushed up to the Repo.</p> <pre><code>$ pre-commit install\npre-commit installed at .git/hooks/pre-commit\n</code></pre> <p>This will ensure that all code meets the required linting standard before being committed.</p>"},{"location":"contributing/#run-pre-commit-manually","title":"Run pre-commit manually","text":"<p>You can run these checks manually on all staged files using the below command :</p> <pre><code>poe pre\n</code></pre>"},{"location":"contributing/#testing","title":"Testing","text":"<p>We are using pytest for testing. Tests will automatically be run when you submit a pull request. You can also run them manually using the following command:</p> <pre><code>pytest\n</code></pre> <p>If you add any new features, please add tests for them. This will help us to ensure that the code is working as expected and will prevent any regressions.</p>"},{"location":"contributing/#changelog","title":"Changelog","text":"<p>The changelog is automatically generated using github-changelog-md, so please do not edit it manually.</p> <p>For maintainers, there is a POE task that will run this and update the changelog file.</p> <pre><code>poe changelog\n</code></pre> <p>You would also need to add a GitHub Personal Access Token to a local config file as usual. See the section in that tools Documentation for information.</p> <p>However, you should NOT include a change to the <code>CHANGELOG.md</code> file in any Pull Requests. This will be handled by the maintainers when a new release is made. Your GitHub username will be added to the changelog automatically beside your PR.</p>"},{"location":"contributing/#convenience-tasks","title":"Convenience Tasks","text":"<p>There are a few other convenience tasks that can be run using the <code>poe</code> command. These are defined in the <code>pyproject.toml</code> file.</p> <p>Each of these tasks can have extra options added which will be passed to the underlying tool.</p> <p>Run <code>mypy</code> on the code base in strict mode:</p> <pre><code>poe mypy\n</code></pre> <p>Format the code using <code>ruff format</code>:</p> <pre><code>poe format\n</code></pre> <p>Lint the code using <code>ruff check</code>:</p> <pre><code>poe ruff\n</code></pre>"},{"location":"contributing/#documentation-tasks","title":"Documentation Tasks","text":"<p>These are to help with developing and updating the documentation.</p> <ul> <li><code>poe docs:serve</code> - Serve the MkDocs locally for testing and development</li> <li><code>poe docs:serve:all</code> - Same as above, but opens to all interfaces so you can   view it on other devices on your network</li> <li><code>poe docs:build</code> - Build the MkDocs site into the <code>dist</code> folder</li> <li><code>poe docs:publish</code> - Publish the docs to your GitHub pages. Note that only   those with write-access to this repo can do this.</li> </ul>"},{"location":"contributing/#guidelines","title":"Guidelines","text":"<p>Here are some guidelines to follow when contributing to SQLiter:</p> <ul> <li>Do not update the version number in the <code>pyproject.toml</code> file. This will be   done by the maintainers when a new release is made.</li> <li>Follow the PEP 8 style guide. The   pre-commit hooks will check for this. We are using   Ruff as both a linter and code formatter.</li> <li>Try to have no linting errors or warnings. The pre-commit hooks will check for   this also.</li> <li>MyPy is installed and we are using   type hints. Please try to add type hints to your code. If you see any areas of   the code that are missing type hints, please feel free to open a PR and add   them \ud83d\ude01!</li> <li>Write clear and concise commit messages.</li> <li>Write tests for your code.</li> <li>Make sure your code passes all tests before submitting a pull request.</li> <li>Document your code using   docstrings.</li> <li>Use GitHub issues   to report bugs or suggest new features.</li> </ul>"},{"location":"contributing/#contact","title":"Contact","text":"<p>If you have any questions or need help with contributing, please contact me @seapagan on GitHub. You can also use the GitHub Discussions feature.</p> <p>Happy contributing!</p>"},{"location":"exceptions/","title":"Exceptions","text":"<p>SQLiter includes several custom exceptions to handle specific errors that may occur during database operations. These exceptions inherit from a common base class, <code>SqliterError</code>, to ensure consistency across error messages and behavior.</p> <ul> <li><code>SqliterError</code>:<ul> <li>The base class for all exceptions in SQLiter. It captures the exception   context and chains any previous exceptions.</li> <li>Message: \"An error occurred in the SQLiter package.\"</li> </ul> </li> </ul> <ul> <li><code>DatabaseConnectionError</code>:<ul> <li>Raised when the SQLite database connection fails.</li> <li>Message: \"Failed to connect to the database: '{}'.\"</li> </ul> </li> </ul> <ul> <li><code>InvalidOffsetError</code>:<ul> <li>Raised when an invalid offset value (0 or negative) is used in queries.</li> <li>Message: \"Invalid offset value: '{}'. Offset must be a positive   integer.\"</li> </ul> </li> </ul> <ul> <li><code>InvalidOrderError</code>:<ul> <li>Raised when an invalid order value is used in queries, such as a   non-existent field or an incorrect sorting direction.</li> <li>Message: \"Invalid order value - {}\"</li> </ul> </li> </ul> <ul> <li><code>TableCreationError</code>:<ul> <li>Raised when a table cannot be created in the database.</li> <li>Message: \"Failed to create the table: '{}'.\"</li> </ul> </li> </ul> <ul> <li><code>RecordInsertionError</code>:<ul> <li>Raised when an error occurs during record insertion.</li> <li>Message: \"Failed to insert record into table: '{}'.\"</li> </ul> </li> </ul> <ul> <li><code>RecordUpdateError</code>:<ul> <li>Raised when an error occurs during record update.</li> <li>Message: \"Failed to update record in table: '{}'.\"</li> </ul> </li> </ul> <ul> <li><code>RecordNotFoundError</code>:<ul> <li>Raised when a record with the specified primary key is not found.</li> <li>Message: \"Failed to find a record for key '{}'\".</li> </ul> </li> </ul> <ul> <li><code>RecordFetchError</code>:<ul> <li>Raised when an error occurs while fetching records from the database.</li> <li>Message: \"Failed to fetch record from table: '{}'.\"</li> </ul> </li> </ul> <ul> <li><code>RecordDeletionError</code>:<ul> <li>Raised when an error occurs during record deletion.</li> <li>Message: \"Failed to delete record from table: '{}'.\"</li> </ul> </li> </ul> <ul> <li><code>InvalidFilterError</code>:<ul> <li>Raised when an invalid filter field is used in a query.</li> <li>Message: \"Failed to apply filter: invalid field '{}'\".</li> </ul> </li> </ul>"},{"location":"installation/","title":"Installation","text":"<p>You can install SQLiter using whichever method you prefer or is compatible with your project setup.</p> <p>With <code>uv</code> which is rapidly becoming my favorite tool for managing projects and virtual environments (<code>uv</code> is used for developing this project and in the CI):</p> <pre><code>uv add sqliter-py\n</code></pre> <p>With <code>pip</code>:</p> <pre><code>pip install sqliter-py\n</code></pre> <p>Or with <code>Poetry</code>:</p> <pre><code>poetry add sqliter-py\n</code></pre>"},{"location":"installation/#optional-dependencies","title":"Optional Dependencies","text":"<p>Currently by default, the only external dependency is Pydantic. However, there are some optional dependencies that can be installed to enable additional features:</p> <ul> <li><code>inflect</code>: For pluralizing table names (if not specified). This just offers a   more-advanced pluralization than the default method used. In most cases you   will not need this.</li> </ul> <p>These can be installed using <code>uv</code>:</p> <pre><code>uv add 'sqliter-py[extras]'\n</code></pre> <p>Or with <code>pip</code>:</p> <pre><code>pip install 'sqliter-py[extras]'\n</code></pre> <p>Or with <code>Poetry</code>:</p> <pre><code>poetry add 'sqliter-py[extras]'\n</code></pre>"},{"location":"license/","title":"License","text":"<p>This project is licensed under the terms of the MIT license below:</p> <pre><code>The MIT License (MIT)\nCopyright (c) 2024 Grant Ramsay\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\nDAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\nOTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE\nOR OTHER DEALINGS IN THE SOFTWARE.\n</code></pre>"},{"location":"quickstart/","title":"Quick Start","text":"<p>Here's a quick example of how to use SQLiter:</p> <pre><code>from sqliter import SqliterDB\nfrom sqliter.model import BaseDBModel\n\n# Define your model\nclass User(BaseDBModel):\n    name: str\n    age: int\n\n    class Meta:\n        table_name = \"users\"\n\n# Create a database connection\ndb = SqliterDB(\"example.db\")\n\n# Create the table\ndb.create_table(User)\n\n# Insert a record\nuser = User(name=\"John Doe\", age=30)\ndb.insert(user)\n\n# Query records\nresults = db.select(User).filter(name=\"John Doe\").fetch_all()\nfor user in results:\n    print(f\"User: {user.name}, Age: {user.age}\")\n\n# Update a record\nuser.age = 31\ndb.update(user)\n\n# Delete a record\ndb.delete(User, \"John Doe\")\n</code></pre> <p>Follow on the next pages for more detailed information on how to use <code>SQLiter</code>.</p>"},{"location":"todo/","title":"TODO","text":""},{"location":"todo/#general-plans-and-ideas","title":"General Plans and Ideas","text":"<ul> <li>add an option to the SQLiter constructor to delete the database file if it   already exists. Default to False.</li> <li>add attributes to the BaseDBModel to read the table-name, file-name, is-memory   etc.</li> <li>add an 'execute' method to the main class to allow executing arbitrary SQL   queries which can be chained to the 'find_first' etc methods or just used   directly.</li> <li>add a 'drop_table' method to the main class to allow dropping tables.</li> <li>add a method to drop the entire database easiest way is prob to just delete   and recreate the database file.</li> <li>add an 'exists_ok' (default True) parameter to the 'create_table' method so it   will raise an exception if the table already exists and this is set to False.</li> <li>add a <code>rollback</code> method to the main class to allow manual rollbacks.</li> <li>allow adding multiple indexes to each table as well as the primary key.</li> <li>allow adding foreign keys and relationships to each table.</li> <li>add a migration system to allow updating the database schema without losing   data.</li> <li>add debug logging to show the SQL queries being executed.</li> <li>add more tests where 'auto_commit' is set to False to ensure that commit is   not called automatically.</li> <li>the database is created with every field as TEXT. We should try to infer the   correct type from the Pydantic model and map it to the correct SQLite type.   The return model is created using the pydantic model, so these are converted   correctly anyway, but it would be nice to have the database schema match the   model schema.</li> <li>support structures like, <code>list</code>, <code>dict</code>, <code>set</code> etc. in the model. This will   need to be stored as a JSON string or pickled in the database (the latter   would be more versatile). Also support <code>date</code> which can be either stored as a   string or more useful as a Unix timestamp in an integer field.</li> <li>for the <code>order()</code> allow ommitting the field name and just specifying the   direction. This will default to the primary key field.</li> </ul>"},{"location":"todo/#potential-filter-additions","title":"Potential Filter Additions","text":"<ul> <li>Range filter<ul> <li><code>__range</code>: For selecting values within a specific range</li> </ul> </li> </ul> <ul> <li>Date and time filters<ul> <li><code>__year</code>, <code>__month</code>, <code>__day</code>: For filtering date fields</li> <li><code>__date</code>: For filtering the date part of a datetime field</li> </ul> </li> </ul> <ul> <li>Regular expression filter<ul> <li><code>__regex</code>: For more complex string matching</li> </ul> </li> </ul> <ul> <li>Numeric operations<ul> <li><code>__abs</code>: Absolute value comparison</li> </ul> </li> </ul> <ul> <li>Boolean filters<ul> <li><code>__istrue</code>, <code>__isfalse</code>: Explicit boolean checks</li> </ul> </li> </ul> <ul> <li>List field operations<ul> <li><code>__contains_all</code>: Check if a list field contains all specified values</li> <li><code>__contains_any</code>: Check if a list field contains any of the specified values</li> </ul> </li> </ul> <ul> <li>Negation filter<ul> <li><code>__not</code>: General negation for other filters</li> </ul> </li> </ul> <ul> <li>Distinct filter<ul> <li><code>__distinct</code>: To get distinct values in a field</li> </ul> </li> </ul>"},{"location":"usage/","title":"Detailed Usage","text":""},{"location":"usage/#defining-models","title":"Defining Models","text":"<p>Models in SQLiter use Pydantic to encapsulate the logic. All models should inherit from SQLiter's <code>BaseDBModel</code>. You can define your models like this:</p> <pre><code>from sqliter.model import BaseDBModel\n\nclass User(BaseDBModel):\n    name: str\n    age: int\n    email: str\n\n    class Meta:\n        table_name = \"users\"\n        primary_key = \"name\"  # Default is \"id\"\n        create_pk = False  # disable auto-creating an incrementing primary key - default is True\n</code></pre> <p>For a standard database with an auto-incrementing integer <code>id</code> primary key, you do not need to specify the <code>primary_key</code> or <code>create_pk</code> fields. If you want to specify a different primary key field name, you can do so using the <code>primary_key</code> field in the <code>Meta</code> class.</p> <p>If <code>table_name</code> is not specified, the table name will be the same as the model name, converted to 'snake_case' and pluralized (e.g., <code>User</code> -&gt; <code>users</code>). Also, any 'Model' suffix will be removed (e.g., <code>UserModel</code> -&gt; <code>users</code>). To override this behavior, you can specify the <code>table_name</code> in the <code>Meta</code> class manually as above.</p> <p>Note</p> <p>The pluralization is pretty basic by default, and just consists of adding an 's' if not already there. This will fail on words like 'person' or 'child'. If you need more advanced pluralization, you can install the <code>extras</code> package as mentioned in the installation. Of course, you can always specify the <code>table_name</code> manually in this case!</p>"},{"location":"usage/#database-operations","title":"Database Operations","text":""},{"location":"usage/#creating-a-connection","title":"Creating a Connection","text":"<pre><code>from sqliter import SqliterDB\n\ndb = SqliterDB(\"your_database.db\")\n</code></pre> <p>The default behavior is to automatically commit changes to the database after each operation. If you want to disable this behavior, you can set <code>auto_commit=False</code> when creating the database connection:</p> <pre><code>db = SqliterDB(\"your_database.db\", auto_commit=False)\n</code></pre> <p>It is then up to you to manually commit changes using the <code>commit()</code> method. This can be useful when you want to perform multiple operations in a single transaction without the overhead of committing after each operation.</p>"},{"location":"usage/#using-an-in-memory-database","title":"Using an In-Memory Database","text":"<p>If you want to use an in-memory database, you can set <code>memory=True</code> when creating the database connection:</p> <pre><code>db = SqliterDB(memory=True)\n</code></pre> <p>This will create an in-memory database that is not persisted to disk. If you also specify a database name, it will be ignored.</p> <pre><code>db = SqliterDB(\"ignored.db\", memory=True)\n</code></pre> <p>The <code>ignored.db</code> file will not be created, and the database will be in-memory. If you do not specify a database name, and do NOT set <code>memory=True</code>, an exception will be raised.</p> <p>Note</p> <p>You can also use <code>\":memory:\"</code> as the database name (same as normal with Sqlite) to create an in-memory database, this is just a cleaner and more descriptive way to do it.</p> <pre><code>db = SqliterDB(\":memory:\")\n</code></pre>"},{"location":"usage/#creating-tables","title":"Creating Tables","text":"<pre><code>db.create_table(User)\n</code></pre>"},{"location":"usage/#inserting-records","title":"Inserting Records","text":"<pre><code>user = User(name=\"Jane Doe\", age=25, email=\"jane@example.com\")\ndb.insert(user)\n</code></pre>"},{"location":"usage/#querying-records","title":"Querying Records","text":"<pre><code># Fetch all users\nall_users = db.select(User).fetch_all()\n\n# Filter users\nyoung_users = db.select(User).filter(age=25).fetch_all()\n\n# Order users\nordered_users = db.select(User).order(\"age\", reverse=True).fetch_all()\n\n# Limit and offset\npaginated_users = db.select(User).limit(10).offset(20).fetch_all()\n</code></pre> <p>Important</p> <p>The <code>select()</code> MUST come first, before any filtering, ordering, or pagination etc. This is the starting point for building your query.</p> <p>See below for more advanced filtering options.</p>"},{"location":"usage/#updating-records","title":"Updating Records","text":"<pre><code>user.age = 26\ndb.update(user)\n</code></pre>"},{"location":"usage/#deleting-records","title":"Deleting Records","text":"<pre><code>db.delete(User, \"Jane Doe\")\n</code></pre>"},{"location":"usage/#commit-your-changes","title":"Commit your changes","text":"<p>By default, SQLiter will automatically commit changes to the database after each operation. If you want to disable this behavior, you can set <code>auto_commit=False</code> when creating the database connection:</p> <pre><code>db = SqliterDB(\"your_database.db\", auto_commit=False)\n</code></pre> <p>You can then manually commit changes using the <code>commit()</code> method:</p> <pre><code>db.commit()\n</code></pre>"},{"location":"usage/#close-the-connection","title":"Close the Connection","text":"<p>When you're done with the database connection, you should close it to release resources:</p> <pre><code>db.close()\n</code></pre> <p>Note that closing the connection will also commit any pending changes, unless <code>auto_commit</code> is set to <code>False</code>.</p>"},{"location":"usage/#transactions","title":"Transactions","text":"<p>SQLiter supports transactions using Python's context manager:</p> <pre><code>with db:\n    db.insert(User(name=\"Alice\", age=30, email=\"alice@example.com\"))\n    db.insert(User(name=\"Bob\", age=35, email=\"bob@example.com\"))\n    # If an exception occurs, the transaction will be rolled back\n</code></pre> <p>Warning</p> <p>Using the context manager will automatically commit the transaction at the end (unless an exception occurs), regardless of the <code>auto_commit</code> setting.</p> <p>the <code>close()</code> method will also be called when the context manager exits, so you do not need to call it manually.</p>"},{"location":"usage/#ordering","title":"Ordering","text":"<p>For now we only support ordering by the single field. You can specify the field to order by and whether to reverse the order:</p> <pre><code>results = db.select(User).order(\"age\", reverse=True).fetch_all()\n</code></pre> <p>This will order the results by the <code>age</code> field in descending order.</p> <p>Warning</p> <p>Previously ordering was done using the <code>direction</code> parameter with <code>asc</code> or <code>desc</code>, but this has been deprecated in favor of using the <code>reverse</code> parameter. The <code>direction</code> parameter still works, but will raise a <code>DeprecationWarning</code> and will be removed in a future release.</p>"},{"location":"usage/#field-control","title":"Field Control","text":""},{"location":"usage/#selecting-specific-fields","title":"Selecting Specific Fields","text":"<p>By default, all commands query and return all fields in the table. If you want to select only specific fields, you can pass them using the <code>fields()</code> method:</p> <pre><code>results = db.select(User).fields([\"name\", \"age\"]).fetch_all()\n</code></pre> <p>This will return only the <code>name</code> and <code>age</code> fields for each record.</p> <p>You can also pass this as a parameter to the <code>select()</code> method:</p> <pre><code>results = db.select(User, fields=[\"name\", \"age\"]).fetch_all()\n</code></pre> <p>Note that using the <code>fields()</code> method will override any fields specified in the 'select()' method.</p>"},{"location":"usage/#excluding-specific-fields","title":"Excluding Specific Fields","text":"<p>If you want to exclude specific fields from the results, you can use the <code>exclude()</code> method:</p> <pre><code>results = db.select(User).exclude([\"email\"]).fetch_all()\n</code></pre> <p>This will return all fields except the <code>email</code> field.</p> <p>You can also pass this as a parameter to the <code>select()</code> method:</p> <pre><code>results = db.select(User, exclude=[\"email\"]).fetch_all()\n</code></pre>"},{"location":"usage/#returning-exactly-one-explicit-field-only","title":"Returning exactly one explicit field only","text":"<p>If you only want to return a single field from the results, you can use the <code>only()</code> method:</p> <pre><code>result = db.select(User).only(\"name\").fetch_first()\n</code></pre> <p>This will return only the <code>name</code> field for the first record.</p> <p>This is exactly the same as using the <code>fields()</code> method with a single field, but very specific and obvious. There is NO equivalent argument to this in the <code>select()</code> method. An exception WILL be raised if you try to use this method with more than one field.</p>"},{"location":"usage/#filter-options","title":"Filter Options","text":"<p>The <code>filter()</code> method in SQLiter supports various filter options to query records.</p>"},{"location":"usage/#basic-filters","title":"Basic Filters","text":"<ul> <li><code>__eq</code>: Equal to (default if no operator is specified)<ul> <li>Example: <code>name=\"John\"</code> or <code>name__eq=\"John\"</code></li> </ul> </li> </ul>"},{"location":"usage/#null-checks","title":"Null Checks","text":"<ul> <li><code>__isnull</code>: Is NULL<ul> <li>Example: <code>email__isnull=True</code></li> </ul> </li> <li><code>__notnull</code>: Is NOT NULL<ul> <li>Example: <code>email__notnull=True</code></li> </ul> </li> </ul>"},{"location":"usage/#comparison-operators","title":"Comparison Operators","text":"<ul> <li><code>__lt</code>: Less than<ul> <li>Example: <code>age__lt=30</code></li> </ul> </li> <li><code>__lte</code>: Less than or equal to<ul> <li>Example: <code>age__lte=30</code></li> </ul> </li> <li><code>__gt</code>: Greater than<ul> <li>Example: <code>age__gt=30</code></li> </ul> </li> <li><code>__gte</code>: Greater than or equal to<ul> <li>Example: <code>age__gte=30</code></li> </ul> </li> <li><code>__ne</code>: Not equal to<ul> <li>Example: <code>status__ne=\"inactive\"</code></li> </ul> </li> </ul>"},{"location":"usage/#list-operations","title":"List Operations","text":"<ul> <li><code>__in</code>: In a list of values<ul> <li>Example: <code>status__in=[\"active\", \"pending\"]</code></li> </ul> </li> <li><code>__not_in</code>: Not in a list of values<ul> <li>Example: <code>category__not_in=[\"archived\", \"deleted\"]</code></li> </ul> </li> </ul>"},{"location":"usage/#string-operations-case-sensitive","title":"String Operations (Case-Sensitive)","text":"<ul> <li><code>__startswith</code>: Starts with<ul> <li>Example: <code>name__startswith=\"A\"</code></li> </ul> </li> <li><code>__endswith</code>: Ends with<ul> <li>Example: <code>email__endswith=\".com\"</code></li> </ul> </li> <li><code>__contains</code>: Contains<ul> <li>Example: <code>description__contains=\"important\"</code></li> </ul> </li> </ul>"},{"location":"usage/#string-operations-case-insensitive","title":"String Operations (Case-Insensitive)","text":"<ul> <li><code>__istartswith</code>: Starts with (case-insensitive)<ul> <li>Example: <code>name__istartswith=\"a\"</code></li> </ul> </li> <li><code>__iendswith</code>: Ends with (case-insensitive)<ul> <li>Example: <code>email__iendswith=\".COM\"</code></li> </ul> </li> <li><code>__icontains</code>: Contains (case-insensitive)<ul> <li>Example: <code>description__icontains=\"IMPORTANT\"</code></li> </ul> </li> </ul>"}]}